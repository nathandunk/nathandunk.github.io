<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-04-18T22:19:09-05:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Nathan Dunkelberger</title><subtitle>I am a Robotics Engineer working on the Dexterous Robotics team at NASA Johnson Space Center. I recently received my PhD in the MAHI Lab at Rice University designing assistive robotics algorithms.</subtitle><author><name>Nathan Dunkelberger</name></author><entry><title type="html">Arduino Serial Plotter</title><link href="http://localhost:4000/Portfolio/Arduino_Serial_Plotter" rel="alternate" type="text/html" title="Arduino Serial Plotter" /><published>2024-02-01T00:00:00-06:00</published><updated>2024-02-01T00:00:00-06:00</updated><id>http://localhost:4000/Portfolio/Arduino_Serial_Plotter</id><content type="html" xml:base="http://localhost:4000/Portfolio/Arduino_Serial_Plotter"><![CDATA[<p>Please check out the <a href="www.github.com/nathandunk/BetterSerialPlotter">github repository</a> with more details, demos, and explanations!</p>

<h1 id="better-serial-plotter">Better Serial Plotter</h1>
<p>I have been using the Arduino platform for more than 5 years now. In many of my projects, I find myself wanting to use some kind of plotting feature to understand something about the status of my project. When the arduino serial plotter became available, I used it extensively, but anyone who has used it knows that is has some significant flaws (you can see the built-in interface <a href="https://arduinogetstarted.com/tutorials/arduino-serial-plotter">here</a>). I set out to build my own application in C++ that would be a drop-in replacement for the arduinoâ€™s built in serial plotter, but with many more features.</p>

<p><img src="/img/add_remove_variables.gif" alt="Better Serial Plotter Demo" /></p>

<p>This project was important for me for several reasons. I saw it as something that could really assist me in my endeavors on the arduino platform, but I also imagined that others could find it just as useful as I could. I also used this opportunity to improve my C++ skills, and teach myself how to make software that could be distributed to the general public, different than most of my hobby projects. For my own practice, I decided to make the software available for Windows, Linux, and Mac.</p>

<p>To my surprise, when I made it available, I had a few people reach out and say that they were really enjoyed using it, and requested features, or help setting it up themselves. This gave me further practice in maintaining and updating a publicly available codebase, and responding to requests form users.</p>]]></content><author><name>Nathan Dunkelberger</name></author><category term="portfolio" /><category term="arduino" /><category term="C++" /><category term="serial" /><category term="GUI" /><summary type="html"><![CDATA[Please check out the github repository with more details, demos, and explanations!]]></summary></entry><entry><title type="html">Model Predictive Control for Multi-DOF Functional Electrical Stimulation &amp;amp; Exoskeleton Integration</title><link href="http://localhost:4000/research/services/2024/02/01/research-fesexo-multi-dof.html" rel="alternate" type="text/html" title="Model Predictive Control for Multi-DOF Functional Electrical Stimulation &amp;amp; Exoskeleton Integration" /><published>2024-02-01T00:00:00-06:00</published><updated>2024-02-01T00:00:00-06:00</updated><id>http://localhost:4000/research/services/2024/02/01/research-fesexo-multi-dof</id><content type="html" xml:base="http://localhost:4000/research/services/2024/02/01/research-fesexo-multi-dof.html"><![CDATA[<p>This project focused on drawing from the strengths of Functional Electrical Stimulation (FES) and Rehabilitation Exoskeletons to eliminate the inherent weaknesses from both. A model predictive control scheme was implemented to distribute the assistance, and human studies showed that the control scheme was helpful for multi-DOF movements.</p>]]></content><author><name>Nathan Dunkelberger</name></author><category term="Services" /><summary type="html"><![CDATA[This project focused on drawing from the strengths of Functional Electrical Stimulation (FES) and Rehabilitation Exoskeletons to eliminate the inherent weaknesses from both. A model predictive control scheme was implemented to distribute the assistance, and human studies showed that the control scheme was helpful for multi-DOF movements.]]></summary></entry><entry><title type="html">MAHI Open Exo Simulation</title><link href="http://localhost:4000/Portfolio/MOE_Sim" rel="alternate" type="text/html" title="MAHI Open Exo Simulation" /><published>2024-01-01T00:00:00-06:00</published><updated>2024-01-01T00:00:00-06:00</updated><id>http://localhost:4000/Portfolio/MOE_sim</id><content type="html" xml:base="http://localhost:4000/Portfolio/MOE_Sim"><![CDATA[<h1 id="mahi-open-exo-simulation">MAHI Open Exo Simulation</h1>
<p>As my coworker and I were designing the MAHI Open Exo (MOE), we were simultaneously developing the software to control it. As we were still waiting on parts to be machined, and electronics to be finished, I wanted a way to make sure that our software was ready to use. As I had already developed a simulation for one of our previous robots, the MEII, I decided to make a simulation for our robot so that we could test our software (all code can be found <a href="https://github.com/mahilab/MOE_sim">here</a>).</p>

<p><img src="/img/moe_sim_rom_demo.gif" alt="Mahi Open Exo Sim Demo" /></p>

<p>After developing a simulation for the MEII, a 5 DOF parallel robot, developing a simulation for MOE, a 4 DOF serial robot was a significantly easier task. With this being a fully serial robot, dynamics could be explicitly found through iterative Newton-Euler equations. With this solution, all that was needed was to find mass properties for each of the successive joints on the robot.</p>

<p>In the past, mass properties have been generated by selecting all relevant parts in Solidworks, and manually copying down mass properties to a c++ file to pull from. When design work has been completed, this is a valid option, but we were still in the process of iterating our designs. Because of this, I wrote a C# script using the Solidworks API to automatically generate the mass properties for each joint to a json format. Similar to the MEII simulation, I used a python script to generate c++ compatible files which could be compiled to run the simulation.</p>]]></content><author><name>Nathan Dunkelberger</name></author><category term="portfolio" /><category term="robotics" /><category term="dynamics" /><category term="simulation" /><category term="kinematics" /><category term="Solidworks" /><category term="C#" /><category term="c++" /><category term="python" /><summary type="html"><![CDATA[MAHI Open Exo Simulation As my coworker and I were designing the MAHI Open Exo (MOE), we were simultaneously developing the software to control it. As we were still waiting on parts to be machined, and electronics to be finished, I wanted a way to make sure that our software was ready to use. As I had already developed a simulation for one of our previous robots, the MEII, I decided to make a simulation for our robot so that we could test our software (all code can be found here).]]></summary></entry><entry><title type="html">MAHI Open Exo Software</title><link href="http://localhost:4000/Portfolio/MOE_Software" rel="alternate" type="text/html" title="MAHI Open Exo Software" /><published>2023-12-01T00:00:00-06:00</published><updated>2023-12-01T00:00:00-06:00</updated><id>http://localhost:4000/Portfolio/MOE_software</id><content type="html" xml:base="http://localhost:4000/Portfolio/MOE_Software"><![CDATA[<h1 id="mahi-open-exo-software">MAHI Open Exo Software</h1>

<p>The MAHI Open Exo runs based on a <a href="https://github.com/mahilab/moe">c++ library</a> that I have developed based on the MEII software library that was used before. This library is set up to interface with a number of DAQs that we have in our lab. The library also abstracts out all necessary conversions so that the user can provide inputs and read outputs directly in useful units. This includes converting encoder position and velocity readings to radians for all joints, accounting for gear ratios, as well as allowing the user to provide command torques to the robot, accounting for conversions from voltage output, to current output, to motor torque output which is then amplified through a gear ratio. An example of some of the high-level commands are shown below.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="c1">// enables communication with the daq and turns on the motor drivers</span>
    <span class="n">moe</span><span class="p">.</span><span class="n">enable</span><span class="p">();</span>
    
    <span class="c1">// updates the internal model of the robot's state</span>
    <span class="n">moe</span><span class="p">.</span><span class="n">update</span><span class="p">();</span>

    <span class="c1">// get all joint positions, or just get the position from a single joint</span>
    <span class="n">moe</span><span class="p">.</span><span class="n">get_joint_positions</span><span class="p">();</span>
    <span class="n">moe</span><span class="p">.</span><span class="n">get_joint_position</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
    
    <span class="c1">// set all raw joint torques </span>
    <span class="n">moe</span><span class="p">.</span><span class="n">set_raw_joint_torques</span><span class="p">(</span><span class="n">command_torques</span><span class="p">);</span>

    <span class="c1">// set torques based on tuned PD gains for position control</span>
    <span class="n">moe</span><span class="p">.</span><span class="n">set_pos_ctrl_torques</span><span class="p">(</span><span class="n">reference</span><span class="p">);</span>

    <span class="c1">// checks the status of all important states to make sure </span>
    <span class="c1">// that the robot is in a safe configuration</span>
    <span class="n">moe</span><span class="p">.</span><span class="n">any_limit_exceeded</span><span class="p">();</span>
</code></pre></div></div>

<p>One of the most important features of this library is that it is tightly integrated with the MOE simulation that has been created to work alongside the robot. Through a simple command line flag which can be added to any program, the program will communcate with the MOE simulation instead of attempting to connect to the appropriate DAQ. This is extremely valuable because it lets the user test any program before running it on the actual robot. Not only does this help verify that the program is doing what it was intended to do, but because it includes accurate dynamics of the robot, control algorithms can be tuned using the simulation so that we know they will run effectively the first time on the real robot.</p>]]></content><author><name>Nathan Dunkelberger</name></author><category term="portfolio" /><category term="robotics" /><category term="software" /><category term="simulation" /><summary type="html"><![CDATA[MAHI Open Exo Software]]></summary></entry><entry><title type="html">MAHI Open Exo Hardware Design</title><link href="http://localhost:4000/Portfolio/MOE_Hardware_Design" rel="alternate" type="text/html" title="MAHI Open Exo Hardware Design" /><published>2023-11-01T00:00:00-05:00</published><updated>2023-11-01T00:00:00-05:00</updated><id>http://localhost:4000/Portfolio/MOE_hardware_design</id><content type="html" xml:base="http://localhost:4000/Portfolio/MOE_Hardware_Design"><![CDATA[<h1 id="mahi-open-exo-hardware-design">MAHI Open Exo Hardware Design</h1>
<p>As I had mentioned in my <a href="/Portfolio/MEII_sim">Mahi Exo II Sim page</a>, the MAHI Exo II was designed quite a while ago. Some of the features that had made it useful in the past also became itâ€™s downfall. To use more advanced control algorithms, we needed to have an accurate and efficient dynamic model of the robot. While I <em>was</em> able to derive the dynamic equations for the MAHI Exo II, it took far too long (~200 us) to calculate the eoms to perform any kind of realtime model-based control using the model. The complexity was due to the MEII using a parallel mechanism for 3 of the 5 degrees of freedom.</p>

<p>We decided to combine the OpenWrist, developed in the <a href="https://mahilab.rice.edu">MAHI lab</a>, with the elbow joint of the MEII to create a robot that had the same number of effective degrees of freedom as the MEII, but was in a serial configuration, and therefore had straightforward dynamics. This new design allowed dynamics to be solved 10x faster, at roughly 20us per solution. This design work was done by myself, and my coworker Jeff Berning, with some help from undergraduate research assistants that we mentored.</p>

<p><img src="/img/MOE_pic.jpg" alt="MOE Picture" /></p>

<p>The first part of this design consisted of making several parts that would interface the two different subcomponents. This design was important, especially because we added a lockable, passive degree of freedom to the robot to adjust for 90th percentile Male and Female arm sizes.</p>

<p>In the process of this redesign, we realized that there were many design components that had been poorly designed before. Some of the problems that we fixed include:</p>
<ul>
  <li>Many components were secured by epoxy, rather than interfacing geometry.</li>
  <li>Several fasteners interfaces had been designed with loose-fit holes that allowed a non-negligible amount of movement.</li>
  <li>Pieces interfacing with bearings were touching both the stationary, and moving parts of the bearing.</li>
</ul>]]></content><author><name>Nathan Dunkelberger</name></author><category term="portfolio" /><category term="robotics" /><category term="dynamics" /><category term="hardware" /><category term="kinematics" /><summary type="html"><![CDATA[MAHI Open Exo Hardware Design As I had mentioned in my Mahi Exo II Sim page, the MAHI Exo II was designed quite a while ago. Some of the features that had made it useful in the past also became itâ€™s downfall. To use more advanced control algorithms, we needed to have an accurate and efficient dynamic model of the robot. While I was able to derive the dynamic equations for the MAHI Exo II, it took far too long (~200 us) to calculate the eoms to perform any kind of realtime model-based control using the model. The complexity was due to the MEII using a parallel mechanism for 3 of the 5 degrees of freedom.]]></summary></entry><entry><title type="html">MAHI Open Exoskeleton Design</title><link href="http://localhost:4000/research/services/2022/02/01/research-moe.html" rel="alternate" type="text/html" title="MAHI Open Exoskeleton Design" /><published>2022-02-01T00:00:00-06:00</published><updated>2022-02-01T00:00:00-06:00</updated><id>http://localhost:4000/research/services/2022/02/01/research-moe</id><content type="html" xml:base="http://localhost:4000/research/services/2022/02/01/research-moe.html"><![CDATA[<p>With the goal of developing my combined FES and Exoskeleton robot, I developed the MAHI Open Exoskeleton to that end. This included mechanical, electrical, and software design, characterization of the dynamics and the creation of a dynamic simulation environment to test advanced control schemes without needing hardware.</p>]]></content><author><name>Nathan Dunkelberger</name></author><category term="Services" /><summary type="html"><![CDATA[With the goal of developing my combined FES and Exoskeleton robot, I developed the MAHI Open Exoskeleton to that end. This included mechanical, electrical, and software design, characterization of the dynamics and the creation of a dynamic simulation environment to test advanced control schemes without needing hardware.]]></summary></entry><entry><title type="html">Miscellaneous Arduino Projects</title><link href="http://localhost:4000/Portfolio/Arduino_Miscellaneous" rel="alternate" type="text/html" title="Miscellaneous Arduino Projects" /><published>2021-10-03T00:00:00-05:00</published><updated>2021-10-03T00:00:00-05:00</updated><id>http://localhost:4000/Portfolio/Arduino_Misc</id><content type="html" xml:base="http://localhost:4000/Portfolio/Arduino_Miscellaneous"><![CDATA[<p><strong>3D printed 3 DOF servo robot</strong> - I developed this 3D printed 3 DOF robot so that I could experiment with my development of automating of visualization of DH parameters. This 3R robot was designed and 3D printed by myself, and allows movement in 3D positional space with forward and inverse kinematics derived for control.</p>

<p><img src="/img/3R_Real.jpg" alt="3D Printed 3DOF Servo Robot" /></p>

<p><strong>3D printed 3 DOF DC motor robot</strong> - After developing my 3D printed servo-based robot, I realized that I wanted to go further and experiment with various control theories and algorithms. By switching to DC motors and using current amplifiers, I can directly provide output torques to each of the joints. Because of this, I am able to use classical formulations of dynamics, where I can provide torque inputs and predict what affect those should have on dynamics. To accomplish this, I also had to switch platforms form arduino to ESP32 so that I had true ADCs available, and to get a significantly faster clock speed. Along with this, I also made a simulation that could be used to simulate the dynamics, including mass properties, and torque inputs from the DC motors.</p>

<p><img src="/img/3R.jpg" alt="3D Printed 3DOF DC Motor Robot" /></p>

<p><strong>Wooden LED Display</strong> - As a birthday gift, I made an LED display powered by an arduino that could display different messaged based on button presses. To dress up the LED display, I made a wooden display with drilled holes for the LEDs to display out of to make it more aesthetic.</p>

<p><img src="/img/MessageBox.jpg" alt="LED Message Box" /></p>

<p><strong>Two-wheeled balancing robot</strong> - My first arduino project was building a two-wheeled balancing robot. This project consists of two DC motors enabling a robot to maintain its balance based on an onboard gyro to track position. I started this project based on a tutorial, but built my own 3D printed base, and adapted code to meet my needs.</p>

<p><img src="/img/BalancingRobot.jpg" alt="Balancing Robot" /></p>]]></content><author><name>Nathan Dunkelberger</name></author><category term="portfolio" /><category term="arduino" /><category term="C++" /><category term="hobby" /><summary type="html"><![CDATA[3D printed 3 DOF servo robot - I developed this 3D printed 3 DOF robot so that I could experiment with my development of automating of visualization of DH parameters. This 3R robot was designed and 3D printed by myself, and allows movement in 3D positional space with forward and inverse kinematics derived for control.]]></summary></entry><entry><title type="html">DH Convention Visualizer</title><link href="http://localhost:4000/Portfolio/DH_Visualizer" rel="alternate" type="text/html" title="DH Convention Visualizer" /><published>2021-10-03T00:00:00-05:00</published><updated>2021-10-03T00:00:00-05:00</updated><id>http://localhost:4000/Portfolio/DH_Convention_Visualizer</id><content type="html" xml:base="http://localhost:4000/Portfolio/DH_Visualizer"><![CDATA[<h1 id="denavit-hartenberg-parameter-visualization">Denavit Hartenberg Parameter Visualization</h1>
<p>When I took my first intro to robotics course, I realized one of the hardest concepts to understand was the Denavit-Hartenberg (DH) convention. While not as common in modern robotics, I feel that DH convention is a powerful tool to find closed-form solutions for both kinematics and dynamics, which helps demistify the nature of these problems for beginner-level roboticists. However, anyone who has learned DH convention is likely familiar with one of the most confusing figures I have seen.</p>

<p>In my opinion, the hardest part of learning DH convention is visualizing what the different DH parameters actually mean, and understanding what a resulting robot looks like given a DH table. When I was learning the concept, I made my own 3D visualization tool in Matlab that could display all coordinate frames given a DH table. I decided that I wanted to make this available for anyone to use to learn the DH convention, and so I expanded this to a python tool as a part of my project for the class, but then decided to remake it using Unity so that it could have a more efficient UI, and so that I could add c++ functionality through dlls if I wanted. The result is shown in the picture below, where the user can add/remove joints, use sliders to change different variables, and the code that runs this is available in this <a href="https://github.com/nathandunk/DHviz2">github repository</a>.</p>

<p><img src="\img\DH_Viz.JPG" alt="DH Visualizer" /></p>]]></content><author><name>Nathan Dunkelberger</name></author><category term="portfolio" /><category term="robotics" /><category term="dynamics" /><category term="simulation" /><category term="kinematics" /><category term="dh" /><summary type="html"><![CDATA[Denavit Hartenberg Parameter Visualization When I took my first intro to robotics course, I realized one of the hardest concepts to understand was the Denavit-Hartenberg (DH) convention. While not as common in modern robotics, I feel that DH convention is a powerful tool to find closed-form solutions for both kinematics and dynamics, which helps demistify the nature of these problems for beginner-level roboticists. However, anyone who has learned DH convention is likely familiar with one of the most confusing figures I have seen.]]></summary></entry><entry><title type="html">Generalized Dynamics and Simulation</title><link href="http://localhost:4000/Portfolio/Generalized_Dynamics" rel="alternate" type="text/html" title="Generalized Dynamics and Simulation" /><published>2021-10-03T00:00:00-05:00</published><updated>2021-10-03T00:00:00-05:00</updated><id>http://localhost:4000/Portfolio/Generalized_Dynamics_Generator</id><content type="html" xml:base="http://localhost:4000/Portfolio/Generalized_Dynamics"><![CDATA[<h1 id="generalized-dynamics-and-simulation">Generalized Dynamics and Simulation</h1>
<p>The goal of this project for me was to do a deep dive into the dynamics and simulation of robots.
I have had to setup several simulations, through both classes and research, but wanted to get a better understanding for the underlying principles.
All of the code for this project is available on the <a href="https://github.com/nathandunk/DHviz2">github page</a>. 
You can see the full result of this project in the gif below.</p>

<p><img src="/img/dh_viz_sim.gif" alt="DH simulating gif" /></p>

<h2 id="goals">Goals</h2>
<p>The goals of this project were</p>
<ul>
  <li>Generate and visualize kinematics from dh parameters in realtime</li>
  <li>Automatically calculate governing equations of motion of a system from dh parameters</li>
  <li>Simulate the developed equations of motion in realtime</li>
  <li>Bonus: Be able to do this all in one session</li>
</ul>

<h1 id="dh-parameter-visualization">DH Parameter Visualization</h1>
<p>The first part of this project was to provide an interactive interface for someone to explore DH convention in an intuitive way. The interface lets you slide or input DH parameters to understand how the resulting coordinate systems change. I made something similar in matlab when I took my robotics course, and I think this tool would be especially useful to explain how this works in practice. I made the interface using Unity, and the equations that govern the visualization are from Introduction to Robotics Third Edition by John Craig.</p>

<h1 id="automatic-generate-equations-of-motion">Automatic Generate Equations of Motion</h1>
<p>The second goal of this project was to automatically calculate the equations of motion for the system given the DH parameters. This can be done given explicit equations also found in Introduction to Robitcs by Craig. This was implemented in Python using the Scipy toolkit. The resulting equations were then converted into c++ files that could calculate the EOM of a robot in realtime. To get the properties of the robot, I setup a json file with mass/inertia properties that describe the robot.</p>

<h1 id="simulate-eoms-in-realtime">Simulate EOMs in realtime</h1>
<p>Once those equations of motion were developed, I used system commands to get cmake to compile the code without leaving the program. Once that was done, I loaded the created dll into the unity simulation, and added open-loop torque controllers at each joint that could again be controlled using sliders to validate that the dynamics were generated correctly.</p>]]></content><author><name>Nathan Dunkelberger</name></author><category term="portfolio" /><category term="robotics" /><category term="dynamics" /><category term="simulation" /><category term="kinematics" /><category term="dh" /><summary type="html"><![CDATA[Generalized Dynamics and Simulation The goal of this project for me was to do a deep dive into the dynamics and simulation of robots. I have had to setup several simulations, through both classes and research, but wanted to get a better understanding for the underlying principles. All of the code for this project is available on the github page. You can see the full result of this project in the gif below.]]></summary></entry><entry><title type="html">FES C++ UART Interface Library</title><link href="http://localhost:4000/Portfolio/FES_library" rel="alternate" type="text/html" title="FES C++ UART Interface Library" /><published>2021-10-03T00:00:00-05:00</published><updated>2021-10-03T00:00:00-05:00</updated><id>http://localhost:4000/Portfolio/High-level_FES_library</id><content type="html" xml:base="http://localhost:4000/Portfolio/FES_library"><![CDATA[<h1 id="high-level-c-fes-library">High-level C++ FES Library</h1>
<p>I developed <a href="https://github.com/mahilab/mahi-fes">a library</a> to run a research-grade Functional Electrical Stimulator System based on low-level UART control. This library facilitated my easy use of FES for coordinated use with the exoskeleton I am using to assist arm movements. One main feature of the library is a GUI that displays the current status of FES channels if being controlled externally, or allows for the direct control if desired. An example of the GUI is shown below.</p>

<p><img src="/img/visualizer.gif" alt="Visualizer" /></p>

<p>A full set of examples for how to use the library is shown <a href="https://github.com/mahilab/mahi-fes/tree/master/examples">here</a>, but see below for some examples of improvements.</p>

<p>The example code for how to control the simulator included a lot of code like the example below.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span><span class="p">(</span><span class="n">new_time</span> <span class="o">-</span> <span class="n">old_time</span> <span class="o">&gt;</span> <span class="mi">100</span><span class="p">){</span>
    <span class="n">chngevnt1</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="o">=</span> <span class="n">open_loop</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
    <span class="n">chngevnt1</span><span class="p">[(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">chngevnt1</span><span class="p">)</span> <span class="o">/</span> <span class="k">sizeof</span><span class="p">(</span><span class="o">*</span><span class="n">chngevnt1</span><span class="p">))</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">checksum</span><span class="p">(</span><span class="n">chngevnt1</span><span class="p">,</span> <span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">chngevnt1</span><span class="p">)</span> <span class="o">/</span> <span class="k">sizeof</span><span class="p">(</span><span class="o">*</span><span class="n">chngevnt1</span><span class="p">)));</span>
    <span class="n">write</span><span class="p">(</span><span class="n">fd0</span><span class="p">,</span> <span class="n">chngevnt1</span><span class="p">,</span> <span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">chngevnt1</span><span class="p">)</span> <span class="o">/</span> <span class="k">sizeof</span><span class="p">(</span><span class="o">*</span><span class="n">chngevnt1</span><span class="p">)));</span>		
    <span class="n">old_time</span> <span class="o">=</span> <span class="n">new_time</span><span class="p">;</span>
    <span class="n">i</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>My goal was to make a library that was much more human-readable and easily configurable. A similar control loop using my library looks like the following.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">stop</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// update the pulsewidth of each of the stimulation events</span>
    <span class="n">stim</span><span class="p">.</span><span class="n">set_amp</span><span class="p">(</span><span class="n">bicep</span><span class="p">,</span> <span class="mi">60</span><span class="p">);</span>
    <span class="n">stim</span><span class="p">.</span><span class="n">write_pw</span><span class="p">(</span><span class="n">bicep</span><span class="p">,</span> <span class="mi">10</span> <span class="o">+</span> <span class="kt">int</span><span class="p">(</span><span class="mi">10</span> <span class="o">*</span> <span class="n">sin</span><span class="p">(</span><span class="n">t</span><span class="p">)));</span>

    <span class="c1">// command the stimulation patterns to be sent to the stim board.</span>
    <span class="c1">// This is required whether using the gui or updating in code.</span>
    <span class="n">test_clock</span><span class="p">.</span><span class="n">restart</span><span class="p">();</span>
    <span class="n">stim</span><span class="p">.</span><span class="n">update</span><span class="p">();</span>
    <span class="c1">// wait for the loop to end</span>
    <span class="n">t</span> <span class="o">=</span> <span class="n">timer</span><span class="p">.</span><span class="n">wait</span><span class="p">().</span><span class="n">as_seconds</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name>Nathan Dunkelberger</name></author><category term="portfolio" /><category term="FES" /><category term="C++" /><category term="gui" /><category term="python" /><summary type="html"><![CDATA[High-level C++ FES Library I developed a library to run a research-grade Functional Electrical Stimulator System based on low-level UART control. This library facilitated my easy use of FES for coordinated use with the exoskeleton I am using to assist arm movements. One main feature of the library is a GUI that displays the current status of FES channels if being controlled externally, or allows for the direct control if desired. An example of the GUI is shown below.]]></summary></entry></feed>